{
  "openapi": "3.0.0",
  "info": {
    "title": "Wordshelf Multiplayer API",
    "version": "2.0.0",
    "description": "Comprehensive API for Wordshelf multiplayer word game server.\n\n## Features\n- **Player Management**: Registration, authentication, online status\n- **Phrase System**: Create, retrieve, complete custom and global phrases\n- **Real-time Communication**: WebSocket support for multiplayer features\n- **Scoring & Leaderboards**: Advanced scoring system with multiple leaderboard types\n- **Security**: Rate limiting, input validation, CORS protection\n- **Multi-language Support**: English and Swedish phrase support\n\n## Environment Configuration\n- **Development**: http://192.168.1.188:3000 (local development server)\n- **Staging**: https://unfortunately-versions-assumed-threat.trycloudflare.com (Pi staging with Cloudflare)\n- **Production**: http://anagram-staging-alb-1354034851.eu-west-1.elb.amazonaws.com (AWS production)\n\n## Authentication\nSome endpoints require API key authentication via X-API-Key header.\n\n## Rate Limits\n- General API: 120 requests/15min (dev), 30 requests/15min (prod)\n- Sensitive endpoints: 100 requests/15min (dev), 10 requests/15min (prod)",
    "contact": {
      "name": "Wordshelf API Support",
      "email": "support@wordshelf.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://192.168.1.188:3000",
      "description": "Development server"
    },
    {
      "url": "https://unfortunately-versions-assumed-threat.trycloudflare.com",
      "description": "Staging server (Pi with Cloudflare)"
    },
    {
      "url": "http://anagram-staging-alb-1354034851.eu-west-1.elb.amazonaws.com",
      "description": "Production server (AWS)"
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for admin endpoints"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Detailed error information"
          }
        },
        "required": ["error"]
      },
      "Player": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique player identifier"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-zA-Z0-9\\s\\-_åäöÅÄÖ]{1,50}$",
            "description": "Player display name"
          },
          "isOnline": {
            "type": "boolean",
            "description": "Current online status"
          },
          "language": {
            "type": "string",
            "enum": ["en", "sv"],
            "description": "Player preferred language"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Account creation timestamp"
          },
          "totalScore": {
            "type": "integer",
            "minimum": 0,
            "description": "Total accumulated score"
          }
        },
        "required": ["id", "name", "isOnline"]
      },
      "Phrase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique phrase identifier"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500,
            "pattern": "^[a-zA-Z0-9\\s\\-_.,!?'\"()åäöÅÄÖ]*$",
            "description": "The phrase text to unscramble"
          },
          "hint": {
            "type": "string",
            "maxLength": 1000,
            "description": "Optional hint for the phrase"
          },
          "language": {
            "type": "string",
            "enum": ["en", "sv"],
            "description": "Phrase language"
          },
          "difficultyLevel": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "description": "Calculated difficulty level"
          },
          "senderName": {
            "type": "string",
            "description": "Name of player who sent this phrase"
          },
          "isGlobal": {
            "type": "boolean",
            "description": "Whether phrase is available globally"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          }
        },
        "required": ["id", "content", "language", "difficultyLevel"]
      },
      "LeaderboardEntry": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "string",
            "format": "uuid"
          },
          "playerName": {
            "type": "string"
          },
          "score": {
            "type": "integer",
            "minimum": 0
          },
          "rank": {
            "type": "integer",
            "minimum": 1
          }
        },
        "required": ["playerId", "playerName", "score", "rank"]
      }
    }
  },
  "paths": {
    "/api/status": {
      "get": {
        "tags": ["System"],
        "summary": "Server Health Check",
        "description": "Get server health status and database connection information",
        "responses": {
          "200": {
            "description": "Server is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "database": {
                      "type": "object",
                      "properties": {
                        "connected": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/config/levels": {
      "get": {
        "tags": ["System"],
        "summary": "Get Level Configuration",
        "description": "Retrieve skill level configuration for difficulty system",
        "responses": {
          "200": {
            "description": "Level configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "config": {
                      "type": "object",
                      "properties": {
                        "skillLevels": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/players/register": {
      "post": {
        "tags": ["Players"],
        "summary": "Register New Player",
        "description": "Register a new player account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50,
                    "pattern": "^[a-zA-Z0-9\\s\\-_åäöÅÄÖ]{1,50}$",
                    "description": "Player display name"
                  },
                  "language": {
                    "type": "string",
                    "enum": ["en", "sv"],
                    "description": "Player preferred language",
                    "default": "en"
                  }
                },
                "required": ["name"],
                "example": {
                  "name": "PlayerName",
                  "language": "en"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Player registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "player": {
                      "$ref": "#/components/schemas/Player"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/players/online": {
      "get": {
        "tags": ["Players"],
        "summary": "Get Online Players",
        "description": "Retrieve list of currently online players",
        "responses": {
          "200": {
            "description": "List of online players",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "players": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Player"
                      }
                    },
                    "count": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/scores/player/{playerId}": {
      "get": {
        "tags": ["Players"],
        "summary": "Get Player Scores",
        "description": "Retrieve detailed scoring information for a specific player",
        "parameters": [
          {
            "name": "playerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Player UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Player scores retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "playerId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "playerName": {
                      "type": "string"
                    },
                    "totalScore": {
                      "type": "integer"
                    },
                    "rarestEmojis": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Player not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/phrases/create": {
      "post": {
        "tags": ["Phrases"],
        "summary": "Create Custom Phrase",
        "description": "Create a new custom phrase to send to specific players or make global",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 500,
                    "pattern": "^[a-zA-Z0-9\\s\\-_.,!?'\"()åäöÅÄÖ]*$",
                    "description": "The phrase text (all words must be ≤7 characters)"
                  },
                  "hint": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "Optional hint for the phrase"
                  },
                  "language": {
                    "type": "string",
                    "enum": ["en", "sv"],
                    "description": "Phrase language"
                  },
                  "senderId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of player sending the phrase"
                  },
                  "targetId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of specific target player (optional)"
                  },
                  "isGlobal": {
                    "type": "boolean",
                    "description": "Whether phrase should be available globally",
                    "default": false
                  }
                },
                "required": ["content", "language"],
                "example": {
                  "content": "hello world",
                  "hint": "greeting",
                  "language": "en",
                  "senderId": "uuid-here",
                  "targetId": "uuid-here"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phrase created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "phrase": {
                      "$ref": "#/components/schemas/Phrase"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/phrases/for/{playerId}": {
      "get": {
        "tags": ["Phrases"],
        "summary": "Get Player Phrases",
        "description": "Retrieve all phrases available for a specific player",
        "parameters": [
          {
            "name": "playerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Player UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Player phrases retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "phrases": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Phrase"
                      }
                    },
                    "count": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Player not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/phrases/{phraseId}/complete": {
      "post": {
        "tags": ["Phrases"],
        "summary": "Complete Phrase",
        "description": "Mark a phrase as completed by a player",
        "parameters": [
          {
            "name": "phraseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Phrase ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "playerId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of player completing the phrase"
                  },
                  "hintsUsed": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Number of hints used"
                  },
                  "completionTime": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Time taken to complete in milliseconds"
                  },
                  "celebrationEmojis": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Emojis used in celebration"
                  }
                },
                "required": ["playerId", "hintsUsed", "completionTime"],
                "example": {
                  "playerId": "uuid-here",
                  "hintsUsed": 0,
                  "completionTime": 5000,
                  "celebrationEmojis": ["🎉", "✨"]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phrase completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "completion": {
                      "type": "object",
                      "properties": {
                        "scoreAwarded": {
                          "type": "integer"
                        },
                        "emojiCollection": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Phrase not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/phrases/{phraseId}/skip": {
      "post": {
        "tags": ["Phrases"],
        "summary": "Skip Phrase",
        "description": "Skip a phrase without completing it",
        "parameters": [
          {
            "name": "phraseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Phrase ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "playerId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of player skipping the phrase"
                  }
                },
                "required": ["playerId"],
                "example": {
                  "playerId": "uuid-here"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phrase skipped successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Phrase not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/leaderboard/{period}": {
      "get": {
        "tags": ["Leaderboards"],
        "summary": "Get Leaderboard",
        "description": "Retrieve leaderboard for specified time period",
        "parameters": [
          {
            "name": "period",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["daily", "weekly", "monthly", "legends"]
            },
            "description": "Leaderboard time period"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of entries to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of entries to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Leaderboard retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "leaderboard": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LeaderboardEntry"
                      }
                    },
                    "period": {
                      "type": "string"
                    },
                    "totalEntries": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/debug/log": {
      "post": {
        "tags": ["Debug"],
        "summary": "Submit Debug Log",
        "description": "Submit debug information from iOS app",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "level": {
                    "type": "string",
                    "enum": ["info", "warning", "error"],
                    "description": "Log level"
                  },
                  "message": {
                    "type": "string",
                    "description": "Log message"
                  },
                  "playerId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Player ID (optional)"
                  }
                },
                "required": ["level", "message"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Log submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/phrases/batch-import": {
      "post": {
        "tags": ["Admin"],
        "summary": "Batch Import Phrases",
        "description": "Import multiple phrases at once (requires API key)",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phrases": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string"
                        },
                        "hint": {
                          "type": "string"
                        },
                        "language": {
                          "type": "string",
                          "enum": ["en", "sv"]
                        }
                      },
                      "required": ["content"]
                    }
                  }
                },
                "required": ["phrases"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phrases imported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "imported": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - API key required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "System",
      "description": "Server health and configuration endpoints"
    },
    {
      "name": "Players",
      "description": "Player registration, authentication, and management"
    },
    {
      "name": "Phrases",
      "description": "Phrase creation, retrieval, completion, and management"
    },
    {
      "name": "Leaderboards",
      "description": "Player rankings and scoring statistics"
    },
    {
      "name": "Debug",
      "description": "Development and debugging utilities"
    },
    {
      "name": "Admin",
      "description": "Administrative operations (requires API key)"
    }
  ]
}