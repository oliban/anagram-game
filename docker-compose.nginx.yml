# Docker Compose configuration with nginx reverse proxy
# This replaces individual Cloudflare tunnels with one clean proxy setup

version: '3.8'

services:
  # Nginx reverse proxy - single entry point  
  nginx:
    image: nginx:alpine
    container_name: anagram-nginx-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - game-server
      - web-dashboard
      - link-generator
      - admin-service
    restart: unless-stopped
    networks:
      - anagram-network
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/nginx-status"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 10s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: anagram-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-anagram_game}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/game-server/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - anagram-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-anagram_game}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Game Server (Main API)
  game-server:
    build:
      context: ./services
      dockerfile: game-server/Dockerfile
    container_name: anagram-game-server
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-anagram_game}
      - DB_SSL=false
      - ADMIN_API_KEY=${ADMIN_API_KEY:-test-admin-key-123}
      - SECURITY_RELAXED=false
      - LOG_SECURITY_EVENTS=true
      - SKIP_RATE_LIMITS=false
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - anagram-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Web Dashboard
  web-dashboard:
    build:
      context: ./services
      dockerfile: web-dashboard/Dockerfile
    container_name: anagram-web-dashboard
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-anagram_game}
      - DB_SSL=false
      - ADMIN_API_KEY=${ADMIN_API_KEY:-test-admin-key-123}
      - SECURITY_RELAXED=false
      - LOG_SECURITY_EVENTS=true
      - SKIP_RATE_LIMITS=false
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - anagram-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Link Generator Service
  link-generator:
    build:
      context: ./services
      dockerfile: link-generator/Dockerfile
    container_name: anagram-link-generator
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-anagram_game}
      - DB_SSL=false
      - ADMIN_API_KEY=${ADMIN_API_KEY:-test-admin-key-123}
      - SECURITY_RELAXED=false
      - LOG_SECURITY_EVENTS=true
      - SKIP_RATE_LIMITS=false
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - anagram-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Admin Service
  admin-service:
    build:
      context: ./services
      dockerfile: admin-service/Dockerfile
    container_name: anagram-admin-service
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-anagram_game}
      - DB_SSL=false
      - ADMIN_API_KEY=${ADMIN_API_KEY:-test-admin-key-123}
      - SECURITY_RELAXED=false
      - LOG_SECURITY_EVENTS=true
      - SKIP_RATE_LIMITS=false
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - anagram-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Cloudflare tunnel service
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: anagram-cloudflared
    command: tunnel --no-autoupdate --url http://nginx:80
    depends_on:
      - nginx
    restart: unless-stopped
    networks:
      - anagram-network
    healthcheck:
      test: ["CMD", "sh", "-c", "pgrep cloudflared > /dev/null"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

networks:
  anagram-network:
    driver: bridge

volumes:
  postgres_data: