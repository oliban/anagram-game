services:
  # PostgreSQL database shared by all services
  postgres:
    image: postgres:15-alpine
    container_name: anagram-db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/shared/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core game server - multiplayer API + WebSocket
  game-server:
    build:
      context: ./services
      dockerfile: game-server/Dockerfile
    container_name: anagram-game-server
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL=${DB_SSL}
      - PORT=${GAME_SERVER_PORT}
    ports:
      - "${GAME_SERVER_PORT}:${GAME_SERVER_PORT}"
    volumes:
      - ./services/logs:/app/logs

  # Web dashboard - admin interface
  web-dashboard:
    build:
      context: ./services
      dockerfile: web-dashboard/Dockerfile
    container_name: anagram-web-dashboard
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL=${DB_SSL}
      - WEB_DASHBOARD_PORT=${WEB_DASHBOARD_PORT}
    ports:
      - "${WEB_DASHBOARD_PORT}:${WEB_DASHBOARD_PORT}"
    volumes:
      - ./services/logs:/app/logs

  # Link generator service
  link-generator:
    build:
      context: ./services
      dockerfile: link-generator/Dockerfile
    container_name: anagram-link-generator
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL=${DB_SSL}
      - LINK_GENERATOR_PORT=${LINK_GENERATOR_PORT}
    ports:
      - "${LINK_GENERATOR_PORT}:${LINK_GENERATOR_PORT}"
    volumes:
      - ./services/logs:/app/logs

  # Admin service - content management and batch operations
  admin-service:
    build:
      context: ./services
      dockerfile: admin-service/Dockerfile
    container_name: anagram-admin-service
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL=${DB_SSL}
      - ADMIN_SERVICE_PORT=${ADMIN_SERVICE_PORT:-3003}
    ports:
      - "${ADMIN_SERVICE_PORT:-3003}:${ADMIN_SERVICE_PORT:-3003}"
    volumes:
      - ./services/logs:/app/logs

volumes:
  postgres_data: