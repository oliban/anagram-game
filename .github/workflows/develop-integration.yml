# Develop Branch Integration
# Runs when features are merged to develop - comprehensive testing before release

name: üîÑ Develop Integration

on:
  push:
    branches: [ develop ]
    paths:
      - 'services/**'
      - 'testing/**'
      - 'docker-compose.services.yml'
      - 'Models/**'
      - 'Views/**'
      - 'services/**'

  # Manual trigger for develop branch validation
  workflow_dispatch:
    inputs:
      run_performance:
        description: 'Run performance tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  API_URL: 'http://localhost:3000'
  # Docker Compose Environment Variables
  NODE_ENV: 'development'
  DB_USER: 'postgres'
  DB_PASSWORD: 'postgres123'
  DB_NAME: 'anagram_game'
  DB_SSL: 'false'
  GAME_SERVER_PORT: '3000'
  WEB_DASHBOARD_PORT: '3001'
  LINK_GENERATOR_PORT: '3002'
  ADMIN_SERVICE_PORT: '3003'
  DATABASE_PORT: '5432'
  ADMIN_API_KEY: 'test-admin-key-123'
  SECURITY_RELAXED: 'true'
  LOG_SECURITY_EVENTS: 'true'
  SKIP_RATE_LIMITS: 'false'

jobs:
  # Comprehensive testing on develop
  integration-tests:
    name: üß™ Integration Testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: anagram_game
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install
          npm install socket.io-client

      - name: Start services for integration testing
        run: |
          echo "üê≥ Starting all services for comprehensive testing"
          docker-compose -f docker-compose.services.yml up -d --wait --wait-timeout 120
          
          # Wait for services to be fully ready
          sleep 20
          
          # Comprehensive health checks
          curl -f http://localhost:3000/api/status || exit 1
          curl -f http://localhost:3001/api/status || exit 1
          curl -f http://localhost:3002/api/status || exit 1
          curl -f http://localhost:3003/api/status || exit 1
          
          echo "‚úÖ All services healthy and ready for testing"

      - name: Run full test suite
        run: |
          echo "üöÄ Running comprehensive test suite on develop branch"
          
          # Determine if we should run performance tests
          if [[ "${{ github.event.inputs.run_performance }}" == "true" ]]; then
            echo "Including performance tests (manual trigger)"
            node testing/scripts/automated-test-runner.js
          else
            echo "Skipping performance tests (develop branch default)"
            SKIP_PERFORMANCE=true node testing/scripts/automated-test-runner.js
          fi

      - name: Extract test metrics
        if: always()
        id: metrics
        run: |
          if [[ -f "testing/reports/latest-test-summary.md" ]]; then
            SUCCESS_RATE=$(grep "Overall Success Rate" testing/reports/latest-test-summary.md | grep -o '[0-9.]*%' || echo "0%")
            PASSED_SUITES=$(grep "Test Suites:" testing/reports/latest-test-summary.md | grep -o '[0-9]*/[0-9]*' | head -1 || echo "0/0")
            
            echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
            echo "passed_suites=$PASSED_SUITES" >> $GITHUB_OUTPUT
            
            echo "üìä Develop Branch Test Results:"
            echo "Success Rate: $SUCCESS_RATE"
            echo "Passed Suites: $PASSED_SUITES"
          fi

      - name: Update develop branch status
        run: |
          echo "üéØ Develop branch integration status:"
          echo "Commit: ${{ github.sha }}"
          echo "Success Rate: ${{ steps.metrics.outputs.success_rate }}"
          echo "Test Suites: ${{ steps.metrics.outputs.passed_suites }}"
          
          # Set GitHub commit status
          if [[ "${{ steps.metrics.outputs.success_rate }}" =~ ^([0-9]+) ]] && [[ ${BASH_REMATCH[1]} -ge 95 ]]; then
            echo "status=success" >> $GITHUB_ENV
            echo "‚úÖ Develop branch ready for release"
          elif [[ "${{ steps.metrics.outputs.success_rate }}" =~ ^([0-9]+) ]] && [[ ${BASH_REMATCH[1]} -ge 90 ]]; then
            echo "status=warning" >> $GITHUB_ENV
            echo "‚ö†Ô∏è Develop branch has minor issues"
          else
            echo "status=failure" >> $GITHUB_ENV
            echo "‚ùå Develop branch has significant issues"
          fi

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: develop-integration-reports-${{ github.run_number }}
          path: |
            testing/reports/
            testing/docs/TESTING_AUDIT_REPORT.md
          retention-days: 30

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.services.yml down

  # Check if develop is ready for release
  release-readiness:
    name: üöÄ Release Readiness Check
    runs-on: ubuntu-latest
    needs: integration-tests
    if: always()
    
    steps:
      - name: Evaluate release readiness
        run: |
          echo "üéØ Evaluating if develop branch is ready for main merge"
          
          # This would typically check multiple criteria:
          # - Test success rate
          # - No critical security issues
          # - Performance within acceptable range
          # - All required approvals
          
          SUCCESS_RATE="${{ needs.integration-tests.outputs.success_rate }}"
          
          if [[ -n "$SUCCESS_RATE" ]] && [[ "$SUCCESS_RATE" =~ ^([0-9]+) ]] && [[ ${BASH_REMATCH[1]} -ge 95 ]]; then
            echo "‚úÖ RELEASE READY: Develop branch meets quality gates"
            echo "Next step: Create release PR to main branch"
          elif [[ -n "$SUCCESS_RATE" ]] && [[ "$SUCCESS_RATE" =~ ^([0-9]+) ]] && [[ ${BASH_REMATCH[1]} -ge 90 ]]; then
            echo "‚ö†Ô∏è RELEASE CONDITIONAL: Manual review recommended"
            echo "Success rate: $SUCCESS_RATE (acceptable but not optimal)"
          else
            echo "‚ùå NOT RELEASE READY: Issues must be resolved"
            echo "Success rate: $SUCCESS_RATE (below threshold)"
          fi

      - name: Create release readiness issue (if problems found)
        if: needs.integration-tests.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Develop Branch Quality Gate Failure - ${new Date().toISOString().split('T')[0]}`,
              body: `## Develop Branch Integration Issues
              
              The develop branch integration tests have detected issues that prevent release readiness.
              
              **Test Results:**
              - Success Rate: ${{ needs.integration-tests.outputs.success_rate }}
              - Test Suites: ${{ needs.integration-tests.outputs.passed_suites }}
              - Commit: \`${{ github.sha }}\`
              
              **Impact:**
              - üö´ Release to main branch is blocked
              - üîÑ Additional development work needed
              - üìã Review test reports for specific issues
              
              **Next Steps:**
              1. Download and review test reports from the failed workflow
              2. Fix identified issues in feature branches
              3. Re-run integration tests until quality gates pass
              4. Only then proceed with release PR to main
              
              **Links:**
              - [Failed Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
              - [Test Reports](${context.payload.repository.html_url}/actions/runs/${context.runId}/artifacts)
              
              This issue will be automatically closed when develop branch tests pass.`,
              labels: ['release-blocker', 'testing', 'develop-branch'],
              assignees: ['${context.actor}']
            });

  # Optional: Automated deployment to development environment
  deploy-to-dev:
    name: üöÄ Deploy to Development
    runs-on: ubuntu-latest
    needs: integration-tests
    if: needs.integration-tests.result == 'success'
    environment: development
    
    steps:
      - name: Deploy to development environment
        run: |
          echo "üöÄ Deploying develop branch to development environment"
          echo "This would typically:"
          echo "  - Build Docker images"
          echo "  - Deploy to dev.wordshelf.com"
          echo "  - Run smoke tests"
          echo "  - Update deployment status"
          
          # Example deployment commands (customize for your infrastructure)
          # docker build --platform linux/amd64 -t wordshelf:develop-${{ github.sha }} .
          # docker push registry/wordshelf:develop-${{ github.sha }}
          # kubectl set image deployment/wordshelf wordshelf=registry/wordshelf:develop-${{ github.sha }}
          
          echo "‚úÖ Development deployment completed"
          echo "üåê Available at: https://dev.wordshelf.com"